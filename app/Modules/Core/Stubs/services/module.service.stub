<?php

namespace {{ namespace }};

use App\Modules\Core\Services\CoreService;
use App\Modules\{{ module }}\Exceptions\{{ module }}DestroyException;
use App\Modules\{{ module }}\Exceptions\{{ module }}IndexException;
use App\Modules\{{ module }}\Exceptions\{{ module }}NotFoundException;
use App\Modules\{{ module }}\Exceptions\{{ module }}SearchException;
use App\Modules\{{ module }}\Exceptions\{{ module }}StoreException;
use App\Modules\{{ module }}\Exceptions\{{ module }}UpdateException;
use App\Modules\{{ module }}\Interfaces\{{ module }}Interface;
use Exception;

class {{ class }} extends CoreService
{
    /**
     * @var {{ module }}Interface
     */
    public {{ module }}Interface ${{ lowercaseModule }}Repository;

    /**
     * @param {{ module }}Interface ${{ lowercaseModule }}Repository
     */
    public function __construct({{ module }}Interface ${{ lowercaseModule }}Repository)
    {
        $this->{{ lowercaseModule }}Repository = ${{ lowercaseModule }}Repository;
    }

    /**
     * @param int $id
     * @return mixed
     * @throws {{ module }}NotFoundException
     */
    public function getById(int $id)
    {
        try {
            return $this->{{ lowercaseModule }}Repository->findById($id);
        } catch (Exception $exception) {
            throw new {{ module }}NotFoundException($exception);
        }
    }

    /**
     * @return mixed
     * @throws {{ module }}IndexException
     */
    public function getAll()
    {
        try {
            return $this->{{ lowercaseModule }}Repository->findAll();
        } catch (Exception $exception) {
            throw new {{ module }}IndexException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed
     * @throws {{ module }}StoreException
     */
    public function create(array $data)
    {
        try {
            return $this->{{ lowercaseModule }}Repository->create($data);
        } catch (Exception $exception) {
            throw new {{ module }}StoreException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed
     * @throws {{ module }}UpdateException
     */
    public function update(array $data)
    {
        try {
            return $this->{{ lowercaseModule }}Repository->update($data['id'], $data);
        } catch (Exception $exception) {
            throw new {{ module }}UpdateException($exception);
        }
    }

    /**
     * @param int $id
     * @return mixed|void
     * @throws {{ module }}DestroyException
     */
    public function delete(int $id)
    {
        try {
            return $this->{{ lowercaseModule }}Repository->delete($id);
        } catch (Exception $exception) {
            throw new {{ module }}DestroyException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed|void
     * @throws {{ module }}SearchException
     */
    public function search(array $data)
    {
        try {
            return $this->{{ lowercaseModule }}Repository->search($data);
        } catch (Exception $exception) {
            throw new {{ module }}SearchException($exception);
        }
    }
}
